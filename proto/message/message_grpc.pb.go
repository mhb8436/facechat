// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: message.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageClient interface {
	Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectResp, error)
	DisConnect(ctx context.Context, in *DisConnectReq, opts ...grpc.CallOption) (*DisConnectResp, error)
	Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendResp, error)
	SaveUnReadMsg(ctx context.Context, in *SaveUnReadMsgReq, opts ...grpc.CallOption) (*SaveUnReadMsgResp, error)
	GetUnReadMsg(ctx context.Context, in *GetUnReadMsgReq, opts ...grpc.CallOption) (*GetUnReadMsgResp, error)
}

type messageClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageClient(cc grpc.ClientConnInterface) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectResp, error) {
	out := new(ConnectResp)
	err := c.cc.Invoke(ctx, "/proto.Message/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) DisConnect(ctx context.Context, in *DisConnectReq, opts ...grpc.CallOption) (*DisConnectResp, error) {
	out := new(DisConnectResp)
	err := c.cc.Invoke(ctx, "/proto.Message/DisConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, "/proto.Message/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) SaveUnReadMsg(ctx context.Context, in *SaveUnReadMsgReq, opts ...grpc.CallOption) (*SaveUnReadMsgResp, error) {
	out := new(SaveUnReadMsgResp)
	err := c.cc.Invoke(ctx, "/proto.Message/SaveUnReadMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) GetUnReadMsg(ctx context.Context, in *GetUnReadMsgReq, opts ...grpc.CallOption) (*GetUnReadMsgResp, error) {
	out := new(GetUnReadMsgResp)
	err := c.cc.Invoke(ctx, "/proto.Message/GetUnReadMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
// All implementations must embed UnimplementedMessageServer
// for forward compatibility
type MessageServer interface {
	Connect(context.Context, *ConnectReq) (*ConnectResp, error)
	DisConnect(context.Context, *DisConnectReq) (*DisConnectResp, error)
	Send(context.Context, *SendReq) (*SendResp, error)
	SaveUnReadMsg(context.Context, *SaveUnReadMsgReq) (*SaveUnReadMsgResp, error)
	GetUnReadMsg(context.Context, *GetUnReadMsgReq) (*GetUnReadMsgResp, error)
	mustEmbedUnimplementedMessageServer()
}

// UnimplementedMessageServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (UnimplementedMessageServer) Connect(context.Context, *ConnectReq) (*ConnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedMessageServer) DisConnect(context.Context, *DisConnectReq) (*DisConnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisConnect not implemented")
}
func (UnimplementedMessageServer) Send(context.Context, *SendReq) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessageServer) SaveUnReadMsg(context.Context, *SaveUnReadMsgReq) (*SaveUnReadMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUnReadMsg not implemented")
}
func (UnimplementedMessageServer) GetUnReadMsg(context.Context, *GetUnReadMsgReq) (*GetUnReadMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnReadMsg not implemented")
}
func (UnimplementedMessageServer) mustEmbedUnimplementedMessageServer() {}

// UnsafeMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServer will
// result in compilation errors.
type UnsafeMessageServer interface {
	mustEmbedUnimplementedMessageServer()
}

func RegisterMessageServer(s grpc.ServiceRegistrar, srv MessageServer) {
	s.RegisterService(&Message_ServiceDesc, srv)
}

func _Message_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Message/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Connect(ctx, req.(*ConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_DisConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).DisConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Message/DisConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).DisConnect(ctx, req.(*DisConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Message/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Send(ctx, req.(*SendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_SaveUnReadMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUnReadMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).SaveUnReadMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Message/SaveUnReadMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).SaveUnReadMsg(ctx, req.(*SaveUnReadMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_GetUnReadMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnReadMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).GetUnReadMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Message/GetUnReadMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).GetUnReadMsg(ctx, req.(*GetUnReadMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Message_ServiceDesc is the grpc.ServiceDesc for Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Message_Connect_Handler,
		},
		{
			MethodName: "DisConnect",
			Handler:    _Message_DisConnect_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Message_Send_Handler,
		},
		{
			MethodName: "SaveUnReadMsg",
			Handler:    _Message_SaveUnReadMsg_Handler,
		},
		{
			MethodName: "GetUnReadMsg",
			Handler:    _Message_GetUnReadMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
